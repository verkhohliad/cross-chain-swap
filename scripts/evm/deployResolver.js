require('dotenv').config();
const { ethers } = require('ethers');

// Deploy a precompiled Resolver bytecode (cross-chain-resolver-example) via raw creation payload.
// Expects PrivateKey in .env and constants.js to provide addresses.
const {
  rpc,
  limitOrderProtocol,
  base_sepolia
} = require('./constants');

async function main() {
  if (!process.env.PrivateKey) {
    throw new Error('Missing PrivateKey in .env');
  }

  const provider = new ethers.JsonRpcProvider(rpc);
  const wallet = new ethers.Wallet(process.env.PrivateKey, provider);

  const escrowFactory = base_sepolia.escrowFactory;
  const coder = new ethers.AbiCoder();

  // args: constructor(address escrowFactory, address limitOrderProtocol, address owner)
  const args = coder.encode(
    ['address', 'address', 'address'],
    [escrowFactory, limitOrderProtocol, wallet.address]
  );

  // Precompiled creationCode from https://github.com/1inch/cross-chain-resolver-example
  // NOTE: verify this matches your compiled bytecode or replace with your own artifact's bytecode
  const creationCode =
    '0x60c0346100f557601f610e7238819003918201601f19168301916001600160401b038311848410176100f9578084926060946040528339810103126100f55780516001600160a01b03919082811681036100f55760208201519183831683036100f557604001518381168091036100f55780156100dd575f80546001600160a01b03198116831782556040519516907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a360805260a052610d64908161010e823960805181818161030f0152610853015260a051816104bc0152f35b604051631e4fbdf760e01b81525f6004820152602490fd5b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe60406080815260048036101561001e575b5050361561001c575f80fd5b005b5f915f3560e01c80631f3177ba14610a245780632c3c9a371461090157838163318b0562146107f957508063715018a61461075d5780638da5cb5b1461070c57838163a4fc705a146105e757508063ca218276146101705763f2fde38b146100865750610010565b3461016c5760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261016c5781359173ffffffffffffffffffffffffffffffffffffffff91828416809403610168576100e0610cde565b83156101395750505f54827fffffffffffffffffffffffff00000000000000000000000000000000000000008216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a380f35b908460249251917f1e4fbdf7000000000000000000000000000000000000000000000000000000008352820152fd5b8480fd5b8280fd5b50907ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601916102a083126105e3576101008093126105e357827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffefc3601126105e3576102843567ffffffffffffffff928382116105df57366023830112156105df5781810135948486116105db57602494368688860101116105d757610214610cde565b8451918201908111828210176105ac57908493929184528135815260209081810197873589528582019460443586526060998a8401606435815260808501608435815260a086019160a435835260c087019960c4358b528d60e08901954260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff60e4351617875273ffffffffffffffffffffffffffffffffffffffff9d51997ffb6bd47e000000000000000000000000000000000000000000000000000000008b52518c8b015251908901525160448801525160648701525160848601525160a4850152865160c48501525160e48401528a61010496858589818c7f0000000000000000000000000000000000000000000000000000000000000000165afa9485156105a2578295610566575b508180809251875af1610350610c81565b501561053e57928895926103b360348c858f98966101a09e839d9b988f7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000090519889961b1689860152018484013781018883820152036014810184520182610c40565b8851998a977ff497df750000000000000000000000000000000000000000000000000000000089526101a4948635908a0152610124908135908a0152610144803560448b015261016490813560648c015261018492833560848d0152873560a48d01526101c4988c60c48b359101528c60e46101e43591015261020435908d015261022435908c015261024435908b01527f08000000000000000000000000000000000000000000000000000000000000006102643517908a015288015280518093880152845b8381106105225750505090847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84868585989786010152011681010301927f0000000000000000000000000000000000000000000000000000000000000000165af190811561051957506104ee578280f35b813d8311610512575b6105018183610c40565b8101031261050f575f808280f35b80fd5b503d6104f7565b513d85823e3d90fd5b8082018301518b82018601528b98508a97508c9550820161047a565b8488517f8a0332d5000000000000000000000000000000000000000000000000000000008152fd5b9094508581813d831161059b575b61057e8183610c40565b810103126105975751888116810361059757938161033f565b5080fd5b503d610574565b8a513d84823e3d90fd5b856041847f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b8780fd5b8680fd5b8580fd5b8380fd5b80848434610708576101207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261070857610622610bdc565b6101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc3601126107035773ffffffffffffffffffffffffffffffffffffffff1691823b1561070357839082519384917f90d3252f0000000000000000000000000000000000000000000000000000000083526024359083015260443560248301526064356044830152608435606483015260a435608483015260c43560a483015260e43560c4830152818361010492833560e48401525af19081156106fa57506106ea5750f35b6106f390610bff565b61050f5780f35b513d84823e3d90fd5b505050fd5b5050fd5b83823461059757817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126105975773ffffffffffffffffffffffffffffffffffffffff60209254169051908152f35b833461050f57807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261050f57610794610cde565b5f73ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b8084847ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360161012081126107035761010013610708576101049161083c610cde565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001692833b15610168576101248592845195869384927fdea024e4000000000000000000000000000000000000000000000000000000008452803590840152602435602484015260443560448401526064356064840152608435608484015260a43560a484015260c43560c484015260e43560e484015280359083015234905af19081156106fa57506106ea5750f35b5034610a20576101407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a205761093a610bdc565b6101007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc360112610a205773ffffffffffffffffffffffffffffffffffffffff1691823b15610a20575f9082519384917f233057030000000000000000000000000000000000000000000000000000000083526024359083015260443560248301526064356044830152608435606483015260a435608483015260c43560a483015260e43560c4830152818361010492833560e4840152610124938435908401525af1908115610a175750610a0d575080f35b61001c9150610bff565b513d5f823e3d90fd5b5f80fd5b509034610a2057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a205767ffffffffffffffff8135818111610a2057610a739036908401610bab565b92602491602435848111610a2057610a8e9036908401610bab565b939092610a99610cde565b848703610b84575f5b878110610aab57005b8060051b808501359073ffffffffffffffffffffffffffffffffffffffff82168203610a205787831015610b59578601357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe187360301811215610a2057860190813591898311610a2057602001908236038213610a2057825f80949381948f519384928337810182815203925af1610b41610c81565b5015610b4f57600101610aa2565b88513d5f823e3d90fd5b846032857f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b87517fff633a38000000000000000000000000000000000000000000000000000000008152fd5b9181601f84011215610a205782359167ffffffffffffffff8311610a20576020808501948460051b010111610a2057565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610a2057565b67ffffffffffffffff8111610c1357604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610c1357604052565b3d15610cd9573d9067ffffffffffffffff8211610c135760405191610cce60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160184610c40565b82523d5f602084013e565b606090565b73ffffffffffffffffffffffffffffffffffffffff5f54163303610cfe57565b60246040517f118cdaa7000000000000000000000000000000000000000000000000000000008152336004820152fdfea26469706673582212201333276f5520bf80caa03d670c2746f993c3f14f24b5afaf75915fbd6d795ba164736f6c63430008170033';

  const payload = ethers.concat([creationCode, args]);

  console.log('Deployer:', wallet.address);
  console.log('EscrowFactory:', escrowFactory);
  console.log('LOP:', limitOrderProtocol);

  const tx = await wallet.sendTransaction({ data: payload });
  console.log('Resolver deploy tx:', tx.hash);
  const receipt = await tx.wait(1);
  console.log('Resolver deployed in block:', receipt.blockNumber);
  // The deployed address will be in receipt.contractAddress if the client supports it
  console.log('Resolver address (if available):', receipt.contractAddress || 'Check logs/events');
}

main().catch((e) => {
  console.error(e);
  process.exit(1);
});
